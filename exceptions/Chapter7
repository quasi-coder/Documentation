Chapter 7

Exceptions

Item1: Use exceptions only for exceptional conditions, they should be never used for ordinary control flow.
		

Item2: Checked Exceptions:

		-Use checked exceptions for the condition from which the caller can reasonably be expected to recover.
		-Each Checked exception that a method is declared to throw is therefore a potent indication to the API user that the associated  condition is possible outcome of invoking the method.
		-Checked exception should furnish information that could help the caller to recover.For example suppose a checked exception is thrown when an attempt to make a purchase with a gift card fails as the card does not have enough money left on it.The exception should provide an accessor method to query the amount of the shortfall,so the amount can be relayed to the shopper.  


Item3: Unchecked throwables:
		- Runtime exceptions and errors:

		    -All of the unchecked throwables always implement subclass RunTimeException(directly or indirectly)

			-Both are throwables that needn't, and generally shouldn't be caught. If a program throws an unchecked exception or an error,
			it is generally the case that recovery is impossible and continued execution would do more harm than good.If a program does not catch such a throwable, it will cause the current thread to halt with an appropriate error message.

		- Use runtime exceptions to indicate programming errors and indicate precondition violations.

		- precondition violation is simply a failure by the client of an API to adhere to the contract established by the API  specification.For example, the contract for array access specifies that the array index must be between zero and the array length minus one. ArrayIndexOutOfBoundsException indicates tha this precondition was violated.

		- Errors:

			errors are reserved for use by the JVM to indicate resource deficiencies, invariant failures or conditions make it impossible to continue execution.

Item4: Commonly used Exception:

		IllegalArgumentException: Non-null parameter value is inappropriate
		IllegalStateException: Object State is inappropriate for method invocation
		NullPointerException: Parameter value is null where prohibited
		IndexOutOfBoundsException: Index parameter value is out of range
		ConcurrentModificationExceptions: Concurrent modification of an object has been detected where it is prohibited
		UnsupportedOperationException: Object does not support method

Item5: Throw exceptions appropriate the abstraction:
        
        Higher layers should catch lower-level exceptions and in their place, throw exceptions that can be explained in terms of higher-level abstraction.

        //Exception Translation

        public E get(int index)
        {

        List<Iterator> i = listIterator(index);
	        try {

			//Use lower level abstraction to do our bidding

	        return i.next();

	        }catch (NoSuchElementException e){//LowerLevel Exception e
	        	throw new IndexOutOfBoundsException("Index: "+index); //HigherLevelException
	        }
        } 



       Exception Chaining:

       try{
       	//Use lower level abstraction to do our bidding
       }catch(LowerLevel Exception e){
         throw new HigherLevelException(cause);//the lower level exception(the cause) is passed to higher level exception which provides 										 an accessor method (Throwable.getCause) to retrieve the lower level exception 

       }

       //Exception with chaining-aware constructor
       class HigherLevelException extends Exception{
       	HigherLevelException(Throwable cause){
       	super(cause);

       	}
       }




        
       
		








